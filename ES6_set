1、set方法没有重复元素
// 去除数组的重复成员
[...new Set(array)]
// 例一
const set = new Set([1, 2, 3, 4, 4]);
[...set]
// [1, 2, 3, 4]
————————————————
2、set实例的属性和方法
size: 返回Set实例的成员总数。
add(value)：添加某个值，返回 Set 结构本身。
delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。
has(value)：返回一个布尔值，表示该值是否为Set的成员。
clear()：清除所有成员，没有返回值。

//添加值、删除值、判断成员、清空
var s=new Set();
s.add(10).add(20).add(30).add(30)
console.log(s);//{10, 20, 30}
s.delete(30);
console.log(s);//{10, 20}
console.log(s.has(20)); //true 判断有没有某个成员
s.clear(); //清空整个s
console.log(s);//{}
————————————————
3、Set 结构的实例有四个遍历方法，可以用于遍历成员。
keys()：返回键名的遍历器
values()：返回键值的遍历器
entries()：返回键值对的遍历器

//查看键、值、键值对		
var set=new Set(["a","b","aaa"]);

for(let key of set.keys()){
	console.log(key);//a b aaa
}
 
var set=new Set(["a","b","aaa"]);
for(let key of set.values()){
	console.log(key);//a b aaa
}
 
var set=new Set(["a","b","aaa"]);
for(let key of set.entries()){ // 键值对
	console.log(key);//["a", "a"] ["b", "b"] ["aaa", "aaa"]
}
set.forEach((val,key)=>{
	console.log(val,key); //a a      b b    aaa aaa
})
————————————————
4、for … of…
let myArr= new Set(['1', '2', '3']);

for (let x of myArr) {
  console.log(x);
}
// 1
// 2
// 3
————————————————
Array.from(s); //转为数组
————————————————
5、差值
let a = new Set( [ 1, 2, 3 ] );
let b = new Set( [ 2, 5, 8 ] );
并集:
    new Set( [...a, ...b ] );
交集:
    new Set( [...a].filter( x => b.has( x ) ) );// 把a里面的每一项展开，展开后转成一个数组，a里面的每一项，在b里面是否存在，存在就return出来
差集:
    new Set( [...a].filter( x => !b.has( x ) ) ); // a里面的每一项，在b里面是没有的
————————————————


vue中首页推荐栏有多个小图标自动换页并且轮播的学习笔记
在模仿去哪儿APP开发中,首页有两个轮播,第一个是banner图的轮播,利用axios从服务端获取链接,然后swiper自动轮播.
相对来说是一个比较普通的一个轮播界面.
现在要做记录的是banner图下面的导航栏的轮播,在一个大的盒子里面有十几个小盒子
而大盒子布局只能在一页中显示8个小盒子
剩下的小盒子就要按照排列自动排到第二页,这个通过CSS可以很容易实现
但是重点是让这个大盒子,能够自动轮播
下面是一个组件里的盒子代码,需要将数据循环放到各个小盒子里,包括(imgUrl 和desc)
在CSS中设定了每一页只能放置8个小盒子,当需要放置的盒子有10个甚至更多,会出现两页,让这两页轮播.
<template>
  <div class="icons">
    <swiper>
      <swiper-slide v-for="(page, index) in pages" :key="index">
    <div class="icon" v-for="item in page" :key="item.id">
      <div class="icon-img">
        <img class="icon-img-content" :src="item.imgUrl" alt="">
      </div>
      <p class="icon-desc">{{item.desc}}</p>
    </div>
    </swiper-slide>
  </swiper>
  </div>
</template>

123456789101112131415
获取item数组 遍历循环的过程跳过不谈
现在重点是将每个小盒子能正常的放置到两页中
iconList就是存储数据的数组
这下面就是核心代码
computed: {
    pages () {
    //定义一个一级数组
      const pages = []
      //进行遍历循环
      this.iconList.forEach((item, index) => {
      //定义一个二级数组,根据iconList索引号向下取整
        const page = Math.floor(index / 8)
        //进项判断,如果pages[page] 不存在
        if (!pages[page]) {
        //就将这个数组设定为空
          pages[page] = []
        }
        //然后将item push到二级数组中
        pages[page].push(item)
      })
      //返回这个一级数组
      return pages
    }
  }
1234567891011121314151617181920
假设原先数组有10个值
这段代码将原先的数组,重新遍历成为两个一级数组,
第一个一级数组里有8个值,根据标签中的v-for放置在第一页中
第二个一级数组里有2个值.放置到第二种.
两个页面就能正常轮播了.
————————————————
版权声明：本文为CSDN博主「weixin_42542422」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/weixin_42542422/java/article/details/106679068
