1、set方法没有重复元素
// 去除数组的重复成员
[...new Set(array)]
// 例一
const set = new Set([1, 2, 3, 4, 4]);
[...set]
// [1, 2, 3, 4]
————————————————
2、set实例的属性和方法
size: 返回Set实例的成员总数。
add(value)：添加某个值，返回 Set 结构本身。
delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。
has(value)：返回一个布尔值，表示该值是否为Set的成员。
clear()：清除所有成员，没有返回值。

//添加值、删除值、判断成员、清空
var s=new Set();
s.add(10).add(20).add(30).add(30)
console.log(s);//{10, 20, 30}
s.delete(30);
console.log(s);//{10, 20}
console.log(s.has(20)); //rue 判断有没有某个成员
s.clear(); //清空整个s
console.log(s);//{}
————————————————
3、Set 结构的实例有四个遍历方法，可以用于遍历成员。
keys()：返回键名的遍历器
values()：返回键值的遍历器
entries()：返回键值对的遍历器

//查看键、值、键值对		
var set=new Set(["a","b","aaa"]);

for(let key of set.keys()){
	console.log(key);//a b aaa
}
 
var set=new Set(["a","b","aaa"]);
for(let key of set.values()){
	console.log(key);//a b aaa
}
 
var set=new Set(["a","b","aaa"]);
for(let key of set.entries()){ //键值对
	console.log(key);//["a", "a"] ["b", "b"] ["aaa", "aaa"]
}
set.forEach((val,key)=>{
	console.log(val,key); //a a      b b    aaa aaa
})
————————————————
4、for … of…
let myArr= new Set(['1', '2', '3']);

for (let x of myArr) {
  console.log(x);
}
// 1
// 2
// 3
————————————————
Array.from(s); //转为数组
————————————————
5、差值
let a = new Set( [ 1, 2, 3 ] );
let b = new Set( [ 2, 5, 8 ] );
并集:
    new Set( [...a, ...b ] );
交集:
    new Set( [...a].filter( x => b.has( x ) ) );// 把a里面的每一项展开，展开后转成一个数组，a里面的每一项，在b里面是否存在，存在就return出来
差集:
    new Set( [...a].filter( x => !b.has( x ) ) ); // a里面的每一项，在b里面是没有的
————————————————
