
<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>Sporadic records</title>
</head>
<body>
	“初始化一个数组，要求数组的长度是 5，每个元素的默认值是 0”
	这道题看似非常简单，我们可能会这样来写代码：

	const arr = []
	for(let i = 0; i < 5; i++){
	  arr.push(0)
	}
	可是如果你学习过 ES6 的语法，就会知道 Array 新增的原型对象方法上有个 fill 的 API，它可以轻松实现这个题目，代码如下：
	const arr = Array(5).fill(0)

	_________________________
	_______________________________________

	属性名可计算:属性名可以传入变量或者常量，而不只是一个固定的字符串。
	const id = 5
    const obj = {
      [`my-${id}`]: id
    }
    console.log(obj['my-5']) // 5
    

	Object.is() 用来解决JavaScript中特殊类型 == 或者 === 异常的情况。
	 //实际出现了异常(错误输出)
    console.log(NaN === NaN) // false
    console.log(+0 === -0) // true
    console.log(5 == "5") //true
    
    //我们期望的目标输出(正确输出)
    console.log(NaN === NaN) // true
    console.log(+0 === -0) // false
    console.log(5 == "5") //false

	为了解决历遗留问题，新增了Object.is()来处理2个值的比较。
	console.log(Object.is(NaN, NaN)) // true
    console.log(Object.is(+0, -0)) // false
    console.log(Object.is(5, "5")) //false


	let arr = [1, 2, 3, 4];
    let [...a] = arr;
    测试过，可以是obj对象
    let [...a] 就已经等于定义了变量 a 并赋值
    console.log(a) //[1,2,3,4] 这种做法就是克隆arr数组


function isObjectValueEqual(a, b) {
     var aProps = Object.getOwnPropertyNames(a);
     var bProps = Object.getOwnPropertyNames(b);
      if (aProps.length != bProps.length) {
           return false;
      }
      for (var i = 0; i < aProps.length; i++) {
        var propName = aProps[i]

        var propA = a[propName]
        var propB = b[propName]
        if ((typeof (propA) === 'object')) {
          if (this.isObjectValueEqual(propA, propB)) {
              return true
            } else {
              return false
            }
        } else if (propA !== propB) {
          return false
        } else { }
      }
    return true
    }
    var a = {
        id:1,
        name:2,
        c:{
            age:3
        }
    };
    var b = {
        id:1,
        name:2,
        c:{
            age:3
        }
    }
    console.log(isObjectValueEqual(a,b));//true
    
    ——————————————————————————
    ————————————————————————————————————————
    
    静态方法 Reflect.ownKeys() 返回一个由目标对象自身的属性键组成的数组
    const object1 = {
	  property1: 42,
	  property2: 13
	};

	var array1 = [];

	console.log(Reflect.ownKeys(object1));
	// expected output: Array ["property1", "property2"]

	console.log(Reflect.ownKeys(array1));
	// expected output: Array ["length"]
	
	语法
	Reflect.ownKeys(target)
	参数
	target
	获取自身属性键的目标对象。
	返回值
	由目标对象的自身属性键组成的 Array。 

	异常
	如果目标不是 Object，抛出一个 TypeError。
	描述
	Reflect.ownKeys 方法返回一个由目标对象自身的属性键组成的数组。
	它的返回值等同于Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target))。
	
	Reflect.ownKeys({z: 3, y: 2, x: 1}); // [ "z", "y", "x" ]
	Reflect.ownKeys([]); // ["length"]

	__________________________
	_______________________________________
	let authors = {
	  allAuthors: {
	    fiction: [
	      'Agatha Christie',
	      'J. K. Rowling',
	      'Dr. Seuss'
	    ],
	    scienceFiction: [
	      'Neal Stephenson',
	      'Arthur Clarke',
	      'Isaac Asimov',
	      'Robert Heinlein'
	    ],
	    fantasy: [
	      'J. R. R. Tolkien',
	      'J. K. Rowling',
	      'Terry Pratchett'
	    ]
	  }
	}
	我们希望可以对 authors 进行遍历并得到所有作者的名单。
	ES6 增加了 Iterator 让任意数据结构可以实现自定义遍历器。直接上代码：
	authors[Symbol.iterator] = function () {
	  let allAuthors = this.allAuthors
	  let keys = Reflect.ownKeys(allAuthors)
	  let values = []
	  return {
	    next () {
	      if (!values.length) {
		if (keys.length) {
		  values = allAuthors[keys[0]]
		  keys.shift()
		}
	      }
	      return {
		done: !values.length,
		value: values.shift()
	      }
	    }
	  }
	}
	我们只需要对 authors 这个数据结构增加 Iterator 遍历器接口即可用 for…of 的方式来遍历了，浏览器不再报错了。


</body>
</html>
