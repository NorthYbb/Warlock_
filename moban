/*
 * @Author: warlock.ss 
 * @Date: 2022-01-24 09:11:45 
 * @Last Modified by: warlock.ss
 * @Last Modified time: 2022-01-29 11:45:56
 */

<template>
  <el-table :data="tableArray" class="box-table scrollbar-x" default-expand-all>
    <el-table-column type="expand" header-align="left" align="left" fixed>
      <template slot-scope="props">
        <div v-for="k in props.row.list" :key="k.id">
          <el-row
            class="el-row-box"
            :style="{
              height:
                propsAuditFlag === 2 || propsAuditFlag === 3
                  ? variableHeight * k[multilevelData].length + 'px'
                  : variableHeight + 'px',
            }"
          >
            <el-col class="col-num">
              <i v-if="k.hasShoreBase">
                <img src="@/assets/new.png" alt />
              </i>
              <span>{{ k.newIndex }}</span>
            </el-col>
            <el-col
              v-for="(j, _jindex) in staticFun(Object.keys(k))"
              :key="_jindex"
              :style="{
                width: styleArray[_jindex]['width'],
                height:
                  propsAuditFlag === 2 || propsAuditFlag === 3
                    ? variableHeight * k[multilevelData].length + 'px'
                    : variableHeight + 'px',
                lineHeight:
                  propsAuditFlag === 2 || propsAuditFlag === 3
                    ? variableHeight * k[multilevelData].length + 'px'
                    : variableHeight + 'px',
              }"
              :class="
                hasOperate
                  ? 'row_style_normal'
                  : j == 'remark'
                  ? 'hasOperateW'
                  : 'row_style_normal'
              "
            >
              <template
                v-if="
                  isEditHeader().includes(j) && isEditFlag && propsAuditFlag < 3
                "
              >
                <el-select
                  v-model="k[j]"
                  filterable
                  placeholder="请选择"
                  :style="{
                    width: '100%',
                  }"
                  v-if="selectionArray.includes(j) && propsAuditFlag < 2"
                  @change="handelSelectBrand(k, j)"
                >
                  <el-option
                    v-for="item in brandArray"
                    :key="item.id"
                    :label="item.value"
                    :value="item.id"
                  >
                  </el-option>
                </el-select>
                <template v-else>
                  <!-- 数量限制为正数就可以 ，不用整数 -->
                  <span
                    v-if="
                      integerArray.includes(j) &&
                      mergeData.includes(j) &&
                      (propsAuditFlag === 2 || propsAuditFlag === 3)
                    "
                  >
                    <el-row
                      class="merge_row"
                      v-for="(g, _gindex) in k[multilevelData]"
                      :key="_gindex"
                      :style="{
                        height: variableHeight + 'px',
                        lineHeight: variableHeight + 'px',
                        display:
                          j == mergeData[0] && g[mergeData[1]]
                            ? _gindex <
                              g[mergeQuantity] +
                                k[multilevelData][0][mergeQuantity]
                              ? 'none'
                              : ''
                            : '',
                      }"
                    >
                      <el-col @click="handleClickRow(props.row, k)">
                        <el-input
                          v-model="g[j]"
                          v-number-input.float="2"
                          placeholder="请输入内容"
                          @blur="handleInputRow(g[j], k, propsAuditFlag, g)"
                          :style="{
                            width: '100%',
                          }"
                          :class="g.required ? 'input-color' : ''"
                        ></el-input>
                      </el-col>
                    </el-row>
                  </span>

                  <el-input
                    v-if="integerArray.includes(j) && propsAuditFlag < 2"
                    v-model="k[j]"
                    v-number-input.float="2"
                    placeholder="请输入内容"
                    @blur="handleInputRow(k[j], k)"
                    :style="{
                      width: '100%',
                    }"
                    :class="k.required ? 'input-color' : ''"
                  ></el-input>
                  <el-input
                    v-if="j === 'remark'"
                    v-model="k[j]"
                    placeholder="请输入内容"
                    :style="{
                      width: '100%',
                    }"
                  ></el-input>
                </template>
              </template>
              <template v-else>
                <span
                  v-if="thousands.includes(j)"
                  :title="k[j]"
                  style="
                    text-overflow: ellipsis;
                    white-space: nowrap;
                    overflow: hidden;
                    text-align: right;
                    display: block;
                  "
                  >{{ $fmoney(k[j] * 1) }}</span
                >
                <span v-else-if="mergeData.includes(j)">
                  <el-row
                    v-for="(g, _gindex) in k[multilevelData]"
                    :key="_gindex"
                    class="merge_row"
                    :style="{
                      height:
                        j == mergeData[0] || j == mergeData[1]
                          ? variableHeight * g[mergeQuantity] + 'px'
                          : variableHeight + 'px',
                      lineHeight:
                        j == mergeData[0] || j == mergeData[1]
                          ? variableHeight * g[mergeQuantity] + 'px'
                          : variableHeight + 'px',
                      display:
                        (j == mergeData[0] || j == mergeData[1]) &&
                        _gindex != 0 &&
                        _gindex != k[multilevelData][0][mergeQuantity]
                          ? 'none'
                          : '',
                    }"
                  >
                    <el-col
                      @click="handleClickRow(props.row, k)"
                      :title="g[j]"
                      >{{ g[j] }}</el-col
                    >
                  </el-row>
                </span>
                <span
                  @click="handleClickRow(props.row, k)"
                  v-else
                  :title="
                    selectionArray[0] == j
                      ? k[selectionArray[1]]
                      : selectionArray[2] == j
                      ? k[selectionArray[3]]
                      : k[j]
                  "
                  class="over_text"
                  :style="{
                    '-webkit-box-orient': 'vertical',
                    'text-overflow': 'ellipsis',
                    overflow: 'hidden',
                    'word-break': 'break-all',
                    display: '-webkit-box',
                    'line-height':
                      k[multilevelData].length == 1 || j !== 'remark'
                        ? 'inherit'
                        : propsAuditFlag < 2
                        ? 'inherit'
                        : '2',
                    '-webkit-line-clamp':
                      k[multilevelData].length == 1 || j !== 'remark'
                        ? k[multilevelData].length
                        : propsAuditFlag < 2
                        ? '1'
                        : k[multilevelData].length + 2,
                  }"
                  >{{ showBrandName(k, j) }}</span
                >
              </template>
            </el-col>
            <!-- 附件 -->
            <el-col
              :style="{
                width: '70px',
                textAlign: 'center',
                height:
                  propsAuditFlag === 2 || propsAuditFlag === 3
                    ? variableHeight * k[multilevelData].length + 'px'
                    : variableHeight + 'px',
                lineHeight:
                  propsAuditFlag === 2 || propsAuditFlag === 3
                    ? variableHeight * k[multilevelData].length + 'px'
                    : variableHeight + 'px',
              }"
              class="row_style_normal"
            >
              <template>
                <BaseFileIcon
                  appendixIds="appendixIds"
                  :value="k"
                  :isDisabled="!k.appendixIds"
                  :editable="isEditFlag"
                  :modalTitle="$t('upload.basicInfo')"
                  :number="k.appendixIds"
                />
              </template>
            </el-col>
            <!-- 删除 -->
            <el-col
              :style="{
                width: '80px',
                textAlign: 'center',
                height:
                  propsAuditFlag === 2 || propsAuditFlag === 3
                    ? variableHeight * k[multilevelData].length + 'px'
                    : variableHeight + 'px',
                lineHeight:
                  propsAuditFlag === 2 || propsAuditFlag === 3
                    ? variableHeight * k[multilevelData].length + 'px'
                    : variableHeight + 'px',
              }"
              v-if="hasOperate"
              class="row_style_normal"
            >
              <template>
                <span @click="handleDelIcon(props.row.list, k, props.row.id)">
                  <i class="el-icon-delete" style="font-size: 18px"></i>
                </span>
              </template>
            </el-col>
          </el-row>
          <div class="static-box" v-if="propsAuditFlag !== 3">
            <span
              v-for="(v, _vIndex) in Object.values(k[grayFieldData])"
              :key="_vIndex"
            >
              <span>{{ viceArray[_vIndex] + $t('common.colon') }}</span
              ><span>{{ v }}</span>
            </span>
          </div>
        </div>
      </template>
    </el-table-column>
    <el-table-column
      v-for="(v, _tindex) in lableArray"
      :key="v.label"
      :label="v.label"
      :prop="v.title"
      header-align="left"
      align="left"
      :title="v.title"
      :fixed="_tindex < 1"
      :width="hasOperate ? v.width : v.title == 'remark' ? '480px' : v.width"
      :render-header="renderHeader"
    >
      <template slot-scope="scope">
        <span
          :title="scope.row[v.title]"
          class="device_title"
          :style="{
            right:
              _tindex == 1
                ? '0'
                : _tindex == 2
                ? '9rem'
                : _tindex == 3
                ? '-3rem'
                : '',

            width:
              _tindex == 1
                ? '13.2rem'
                : _tindex == 3
                ? '-3rem'
                : '',
          }"
        >
          {{ scope.row[v.title] }}
        </span>
      </template>
    </el-table-column>
    <el-table-column
      label="附件"
      header-align="center"
      align="center"
      width="70px"
    >
    </el-table-column>
    <el-table-column
      label="操作"
      fixed="right"
      header-align="center"
      align="center"
      width="80px"
      v-if="hasOperate"
    >
      <template slot-scope="scope">
        <span @click="handleDelIcon(tableArray, scope.row)">
          <i class="el-icon-delete" style="font-size: 18px"></i>
        </span>
      </template>
    </el-table-column>
  </el-table>
</template>
<script>
import { EventBus } from 'base-core-lib'
export default {
  name: 'tableNomarl',
  props: {
    // 品牌集合
    brandArray: {
      type: Array,
      default() {
        return []
      },
    },
    // 是否显示操作列
    hasOperate: {
      type: Boolean,
      default: true,
    },
    // 审核标识（0-基础版本or1-一级or2-二级or3-over）
    propsAuditFlag: {
      type: Number,
      default: 0,
    },
    // 是否可以编辑
    isEditFlag: {
      type: Boolean,
      default: false,
    },
    // 表格数据
    tableData: {
      type: Array,
      default() {
        return []
      },
    },
    // 表头数据
    lableData: {
      type: Array,
      default() {
        return []
      },
    },
    // 表格宽度集合
    styleData: {
      type: Array,
      default() {
        return []
      },
    },
    // 合并表头集合
    mergeData: {
      type: Array,
      default() {
        return []
      },
    },
    // 子集需要合并的字段属性 个数
    mergeQuantity: {
      type: String,
      default() {
        return ''
      },
    },
    // 子集需要合并的字段属性对象
    multilevelData: {
      type: String,
      default: '',
    },
    // 灰色文字
    viceArray: {
      type: Array,
      default() {
        return []
      },
    },
    // 灰色对象
    grayFieldData: {
      type: String,
      default: '',
    },
    // input入力- 数量限制为正数就可以 ，不用整数
    integerData: {
      type: Array,
      default() {
        return []
      },
    },
    // 可编辑表头集合
    isEditHeaderData: {
      type: Array,
      default() {
        return []
      },
    },
    // 下拉表头集合
    selectionArray: {
      type: Array,
      default() {
        return []
      },
    },
    // 千分符
    thousands: {
      type: Array,
      default() {
        return []
      },
    },
  },
  computed: {
    staticFun() {
      return function (val) {
        let _showName = this.styleNameArray.filter((item) => val.includes(item))
        return _showName
      }
    },
    showBrandName() {
      return function (item, val) {
        let _name = ''
        _name = this.selectionArray[this.selectionArray.indexOf(val) + 1]
        return this.selectionArray.includes(val) ? item[_name] : item[val]
      }
    },
    isEditHeader() {
      return function () {
        let _nameArray = []
        this.isEditHeaderArray
          .filter((item) =>
            this.propsAuditFlag == 0
              ? item.auditFlag == this.propsAuditFlag || !item.auditFlag
              : this.propsAuditFlag == 1
              ? item.auditFlag == this.propsAuditFlag || !item.auditFlag
              : this.propsAuditFlag == 2
              ? item.auditFlag == this.propsAuditFlag
              : item.auditFlag
          )
          .map((m) => {
            _nameArray.push(m.name)
          })
        return _nameArray
      }
    },
  },

  watch: {
    tableData: {
      handler(newVal, oldVal) {
        let _list = []
        newVal.map((s) => {
          _list.push(...s.list)
        })
        _list.map((k, _kindex) => {
          this.$set(k, 'newIndex', _kindex + 1)
        })
        this.tableArray = newVal
      },
      immediate: true,
      deep: true,
    },
    lableData: {
      handler(newVal, oldVal) {
        this.lableArray = newVal
      },
      immediate: true,
      deep: true,
    },
    styleData: {
      handler(newVal, oldVal) {
        this.styleArray = newVal
      },
      immediate: true,
      deep: true,
    },
    isEditHeaderData: {
      handler(newVal, oldVal) {
        this.isEditHeaderArray = newVal
      },
      immediate: true,
      deep: true,
    },

    propsAuditFlag: {
      handler(newVal, oldVal) {
        // 一级审核 需要显示 审批数量 auditsNum 审批品牌 auditsBrandId
        // isEditHeaderArray styleArray integerArray lableArray
        this.lableArray = this.lableArray.filter(
          (item) => item.auditFlag < this.propsAuditFlag + 1
        )
        this.styleArray = this.styleArray.filter(
          (item) => item.auditFlag < this.propsAuditFlag + 1
        )

        let _nameArray = []
        this.styleArray.map((m) => {
          _nameArray.push(m.name)
        })
        this.styleNameArray = _nameArray
        if (newVal != 3) {
          this.integerArray = this.integerData[newVal]
        }
      },
      immediate: true,
      deep: true,
    },
  },

  data() {
    return {
      tableArray: [],
      lableArray: [],
      styleArray: [],
      styleNameArray: [],
      isEditHeaderArray: [],
      integerArray: [],
      variableHeight: 40,
    }
  },
  created() {},
  methods: {
    renderHeader(h, { column }) {
      if (column.label === '岸基直接/供船数量') {
        return h('span', {}, [
          h('p', {}, column.label.split('/')[0]),
          h('p', {}, column.label.split('/')[1]),
        ])
      } else {
        if (column.property === 'required' && this.isEditFlag) {
          return h('span', [
            h('i', {
              class: 'el-icon-star-on',
              style: 'color: #f91717',
            }),
            h('span', column.label),
          ])
        } else {
          return h('span', [h('span', column.label)])
        }
      }
    },
    handleClickRow(row, k) {
      // 用于 平均采办单价 历史弹层的操作
      console.log('aa', row, k)
    },
    handleInputRow(row, k, auditFlag, val) {
      if (!row) {
        if (auditFlag) {
          this.$set(val, 'required', true)
        } else {
          this.$set(k, 'required', true)
        }
        EventBus.$emit('warning', this.$t('请正确填入申请数量!'))
        return
      } else {
        if (auditFlag) {
          this.$set(val, 'required', false)
        }
        this.$set(k, 'required', false)
      }
    },

    handleDelIcon(item, val, key) {
      let _parentText = '此操作将永久删除设备分类文件, 是否继续?',
        _childText = '此操作将永久删除子文件, 是否继续?'
      this.$confirm(key ? _childText : _parentText, '提示', {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'warning',
      })
        .then(() => {
          // callback 抛到上层处理,组件接收新的表格数据渲染
          this.$emit('handelCallbackDel', item, val, key)
        })
        .catch(() => {})
    },
    handleAddToData(arry) {
      // arry 为上层级 传递过来的添加数组
      let _arry = []
      this.tableArray.unshift(..._arry)
    },
    handelSelectBrand(data, j) {
      let _name = ''
      _name = this.selectionArray[this.selectionArray.indexOf(j) + 1]
      data[_name] = this.brandArray.find((e) => e.id == data[j]).value
    },
  },
}
</script>

<style scoped lang="scss">
.box-table {
  width: 100%;
  border: 1px solid #ccc;
  /deep/.el-table__header-wrapper {
    tr > th {
      border-right: 1px solid #ccc;
    }
  }
  /deep/.el-table__body-wrapper {
    tr.el-table__row > td {
      background: #e2edfa;
    }
  }
  /deep/.el-table__fixed {
    tr.el-table__row > td {
      background: #e2edfa;
    }
  }
  /deep/.el-table__fixed-right {
    tr.el-table__row > td {
      background: #e2edfa;
    }
  }
  .device_title {
    text-overflow: ellipsis;
    white-space: nowrap;
    overflow: hidden;
    position: absolute;
    z-index: 9999;
    width: 12rem;
    top: 15px;
    right: 3rem;
  }
}
.el-row-box {
  position: relative;
  display: flex;
  text-align: left;
  height: 40px;
  align-items: center;
  border-bottom: 1px solid #ccc;
  .col-num {
    border-left: none;
    width: 47px;
    text-align: center;
    padding: 0;
    > i {
      position: absolute;
      top: 0;
      left: 0;
      width: 0;
      height: 0;
    }
  }
  .row_style_normal {
    padding: 0 5px;
    border-left: 1px solid #ccc;
    width: 150px;
  }
  .hasOperateW {
    width: 480px !important;
    padding: 0 5px;
    border-left: 1px solid #ccc;
  }
  .over_text {
    text-overflow: ellipsis;
    // white-space: nowrap;
    overflow: hidden;
    display: inline-block;
    width: 100%;
  }
  .merge_row {
    height: 40px;
    line-height: 40px;
    border-bottom: 1px solid #ccc;
  }
  .input-color {
    /deep/.el-input__inner {
      border: 1px solid #ff0000;
    }
  }
}
.static-box {
  display: flex;
  justify-content: space-between;
  padding-left: 1rem;
  height: 40px;
  line-height: 40px;
  background-color: rgba(242, 242, 242, 1);
  span:last-child {
    flex: 0.5;
  }
}
/deep/ .el-table__header tr th:nth-child(1n + 0) {
  p:first-child {
    margin: 0;
    height: 1rem;
  }
  p {
    margin: 0;
  }
}
</style>
