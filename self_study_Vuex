VUEX的使用个人理念--
如果需要有大量的操作和数据需要在多个组件内使用的话呢，就可以用这个 Vuex

import { dynInit } from '@/model/dispatch/basicIndex'
const state = {
  // 参考模板集合
  reference: [],
}

const mutations = {
  // 参考模板集合
  SET_REFERENCE: (state, data) => {
    state.reference = [...data]
    console.log('fdf', data)
  }
}

const actions = {
  async init({commit}, info) {
      await dynInit({
        compId: info.compId,
        constCode: 'CONTRACT_TEMPLATE_TYPE'
      })
      .toPromise()
      .then(data => {
        commit('SET_REFERENCE', data)
      })
      .catch(error => {
        console.info(error)
      })
  },
  // action中可能会有 N 个函数，也可以调用自己的其他方法
}

export default {
  namespaced: true,
  state,
  mutations,
  actions
}


页面上调用---
可以输出 tihs 就会有你的 action state 等，一些方法
输出--this.$store.state 可以找对应的 数据仓库

// 可以在 created 的时候，async/await 下,等数据拿到后进行下一步
  async created() {
    await this.init({
      compId: sessionStorage.getItem('ws-pf_compId')
    })

    let _refer = this.$store.state.basics.reference
    _refer.forEach(item => {
      item.flag = 'delete'
    })
    this.baseList = _refer
    this.initInfo(_refer)
  },

 created() {
 // example--
    this.init({
      compId: sessionStorage.getItem('ws-pf_compId')
    })
    let _refer = this.$store.state.basics.reference
    拿到目标数据，可以做二次处理，或者 在mutations中获取到数据后，进行二次处理，页面只做接收
  },
methods: {
// 要把仓库store 中的action引用到此使用
    ...mapActions('basics', ['init']),
   }
可以看下 这个地址：https://www.cnblogs.com/mica/p/10757965.html 、 https://www.cnblogs.com/Yancyzheng/p/12714949.html

// 航次总时间=航次结束时间-航次开始时间，结果是保留2位小数的天数
      if (start && end) {
        let time = new Date(end).getTime() - new Date(start).getTime() //时间差的毫秒数
        //计算出相差天数
        let days = Math.floor(time / (24 * 3600 * 1000))
        //计算出小时数
        let leave1 = time % (24 * 3600 * 1000) //计算天数后剩余的毫秒数
        let hours = Math.floor(leave1 / (3600 * 1000))
        //计算相差分钟数
        let leave2 = leave1 % (3600 * 1000) //计算小时数后剩余的毫秒数
        let minutes = Math.floor(leave2 / (60 * 1000))
        //计算相差秒数
        let ruselt = (days * 1 + hours / 24 + (minutes / 60 / 24) * 1).toFixed(
          2
        )
      }


节流  import { throttle } from 'lodash'
function: throttle(
      function() {
        // 逻辑操作
      },
      5000,
      { trailing: false }
    ),

问题：回车和失去焦点事件同时触发
使用element中新建标签的功能，按钮没隐藏，发现是因为keyup.enter和blur同时触发了
原因：绑定了两个触发方式，执行了两次
解决方法：@keyup.enter.native="$event.target.blur"
将回车事件指向当前元素的失去焦点事件即可！

@keyup.enter.native="$event.target.blur"
@blur="handleBlur(node, data)"
